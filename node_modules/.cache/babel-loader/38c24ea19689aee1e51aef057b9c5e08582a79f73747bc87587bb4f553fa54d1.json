{"ast":null,"code":"var _jsxFileName = \"C:\\\\laragon\\\\www\\\\react-black\\\\black\\\\src\\\\pages\\\\SlidingTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './TranslationPopup.css'; // Assurez-vous de créer ce fichier CSS pour styliser votre composant\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TranslationPopup() {\n  _s();\n  const [activeElement, setActiveElement] = useState(null);\n  const [language, setLanguage] = useState('ENG'); // Langue par défaut : anglais\n\n  const elementsToTranslate = [{\n    id: 1,\n    engText: 'Hello',\n    frText: 'Bonjour'\n  }, {\n    id: 2,\n    engText: 'Goodbye',\n    frText: 'Au revoir'\n  }, {\n    id: 3,\n    engText: 'Thank you',\n    frText: 'Merci'\n  }\n  // Ajoutez d'autres éléments et leurs traductions ici\n  ];\n\n  const handleElementClick = element => {\n    setActiveElement(element);\n  };\n  const toggleLanguage = () => {\n    setLanguage(language === 'ENG' ? 'FR' : 'ENG');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"translation-popup\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup-header\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleLanguage,\n        children: language === 'ENG' ? 'FR' : 'ENG'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"elements-list\",\n      children: elementsToTranslate.map(element => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleElementClick(element),\n        className: activeElement === element ? 'active' : '',\n        children: language === 'ENG' ? element.engText : element.frText\n      }, element.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(TranslationPopup, \"gPbSun9F22L2+hw6FLMAy7WtJG4=\");\n_c = TranslationPopup;\nexport default TranslationPopup;\nvar _c;\n$RefreshReg$(_c, \"TranslationPopup\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","TranslationPopup","_s","activeElement","setActiveElement","language","setLanguage","elementsToTranslate","id","engText","frText","handleElementClick","element","toggleLanguage","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["C:/laragon/www/react-black/black/src/pages/SlidingTable.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './TranslationPopup.css'; // Assurez-vous de créer ce fichier CSS pour styliser votre composant\r\n\r\nfunction TranslationPopup() {\r\n  const [activeElement, setActiveElement] = useState(null);\r\n  const [language, setLanguage] = useState('ENG'); // Langue par défaut : anglais\r\n\r\n  const elementsToTranslate = [\r\n    { id: 1, engText: 'Hello', frText: 'Bonjour' },\r\n    { id: 2, engText: 'Goodbye', frText: 'Au revoir' },\r\n    { id: 3, engText: 'Thank you', frText: 'Merci' },\r\n    // Ajoutez d'autres éléments et leurs traductions ici\r\n  ];\r\n\r\n  const handleElementClick = (element) => {\r\n    setActiveElement(element);\r\n  };\r\n\r\n  const toggleLanguage = () => {\r\n    setLanguage(language === 'ENG' ? 'FR' : 'ENG');\r\n  };\r\n\r\n  return (\r\n    <div className=\"translation-popup\">\r\n      <div className=\"popup-header\">\r\n        <button onClick={toggleLanguage}>\r\n          {language === 'ENG' ? 'FR' : 'ENG'}\r\n        </button>\r\n      </div>\r\n      <ul className=\"elements-list\">\r\n        {elementsToTranslate.map((element) => (\r\n          <li\r\n            key={element.id}\r\n            onClick={() => handleElementClick(element)}\r\n            className={activeElement === element ? 'active' : ''}\r\n          >\r\n            {language === 'ENG' ? element.engText : element.frText}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TranslationPopup;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,wBAAwB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,gBAAgBA,CAAA,EAAG;EAAAC,EAAA;EAC1B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACO,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEjD,MAAMS,mBAAmB,GAAG,CAC1B;IAAEC,EAAE,EAAE,CAAC;IAAEC,OAAO,EAAE,OAAO;IAAEC,MAAM,EAAE;EAAU,CAAC,EAC9C;IAAEF,EAAE,EAAE,CAAC;IAAEC,OAAO,EAAE,SAAS;IAAEC,MAAM,EAAE;EAAY,CAAC,EAClD;IAAEF,EAAE,EAAE,CAAC;IAAEC,OAAO,EAAE,WAAW;IAAEC,MAAM,EAAE;EAAQ;EAC/C;EAAA,CACD;;EAED,MAAMC,kBAAkB,GAAIC,OAAO,IAAK;IACtCR,gBAAgB,CAACQ,OAAO,CAAC;EAC3B,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3BP,WAAW,CAACD,QAAQ,KAAK,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC;EAChD,CAAC;EAED,oBACEL,OAAA;IAAKc,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChCf,OAAA;MAAKc,SAAS,EAAC,cAAc;MAAAC,QAAA,eAC3Bf,OAAA;QAAQgB,OAAO,EAAEH,cAAe;QAAAE,QAAA,EAC7BV,QAAQ,KAAK,KAAK,GAAG,IAAI,GAAG;MAAK;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eACNpB,OAAA;MAAIc,SAAS,EAAC,eAAe;MAAAC,QAAA,EAC1BR,mBAAmB,CAACc,GAAG,CAAET,OAAO,iBAC/BZ,OAAA;QAEEgB,OAAO,EAAEA,CAAA,KAAML,kBAAkB,CAACC,OAAO,CAAE;QAC3CE,SAAS,EAAEX,aAAa,KAAKS,OAAO,GAAG,QAAQ,GAAG,EAAG;QAAAG,QAAA,EAEpDV,QAAQ,KAAK,KAAK,GAAGO,OAAO,CAACH,OAAO,GAAGG,OAAO,CAACF;MAAM,GAJjDE,OAAO,CAACJ,EAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKb,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAAClB,EAAA,CAvCQD,gBAAgB;AAAAqB,EAAA,GAAhBrB,gBAAgB;AAyCzB,eAAeA,gBAAgB;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}